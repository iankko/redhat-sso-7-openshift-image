#!/bin/bash
set -e

# 185 is the registered static UID of the 'jboss' user. See uidgid file from
# the 'setup' package for details:
#   $ grep -P '185\s+' $(rpm -ql setup | grep uidgid)
#
JBOSS_WILDFLY_USER_STATIC_UID=185

declare -A USER=(
  # For backward-compatibility default to 185 as the UID of the 'jboss' user.
  ["UID"]="${JBOSS_WILDFLY_USER_STATIC_UID}"
  ["GID"]="${JBOSS_WILDFLY_USER_STATIC_UID}"
  ["NAME"]="jboss"
  ["GECOS"]="JBoss User"
  ["HOME"]="/home/jboss"
  ["SHELL"]="/sbin/nologin"
)

# Specify the intermediary location of the newly generated passwd file for
# the NSS API wrapper
GENERATED_PASSWD="/root/passwd"

# Generate passwd file based on 185 UID
# First mirror the current content of system's /etc/passwd into the new passwd
# file (except the possibly already existing entries for the 'jboss' user)
grep -v                  \
     -e "^${USER[UID]}"  \
     -e "^${USER[NAME]}" \
     "/etc/passwd" > "${GENERATED_PASSWD}"

# Then add entry for the 'jboss' user into the new passwd file for NSS API
JBOSS_USER_ENTRY=(
  "${USER[NAME]}:x:${USER[UID]}:${USER[GID]}:"
  "${USER[GECOS]}:${USER[HOME]}:${USER[SHELL]}"
)
printf '%s' "${JBOSS_USER_ENTRY[@]}" $'\n' >> "${GENERATED_PASSWD}"

# Instruct NSS wrapper to use previously created passwd file so the 'jboss'
# user is known to the system and it's possible to create their home directory
export LD_PRELOAD="libnss_wrapper.so"
export NSS_WRAPPER_PASSWD="${GENERATED_PASSWD}"
export NSS_WRAPPER_GROUP="/etc/group"

# 'jboss' user is known to the system, but their home directory doesn't exist
# yet. Create it
if [ ! -d "${USER[HOME]}" ]
then
  INFO_MESSAGE=(
    "Creating home directory for the '${USER[NAME]}' user: '${USER[HOME]}'"
  )
  echo -e "${INFO_MESSAGE[@]}"
  # Exit with error if the home directory failed to be created
  if ! mkhomedir_helper "${USER[NAME]}"
  then
    ERROR_MESSAGE=(
      "Failed to create the '${USER[HOME]}' home directory for the"
      "'${USER[NAME]}' user!\nCannot continue, exiting."
    )
    echo -e "${ERROR_MESSAGE[@]}"
    exit 1
  fi
fi

# Needed to support image running as an arbitrary user.
# See 'Support Arbitrary User IDs' section of:
#   https://docs.openshift.com/container-platform/3.11/creating_images/guidelines.html#openshift-specific-guidelines
chmod ug+rwX "${USER[HOME]}"

# Create the default 'jboss' group for the 'jboss' user
groupadd -r "${USER[NAME]}" -g "${USER[GID]}"

# Move intermediary NSS API passwd file to home directory of the 'jboss' user
# and set 'jboss' as the owner. This is needed later dynamically to be able
# adjust the UID of the 'jboss' user in the passwd file to match the effective
# UID the container is running under
NEW_DESTINATION="${USER[HOME]}/passwd"
mv "${GENERATED_PASSWD}" "${NEW_DESTINATION}"
# Instruct NSS wrapper to start using the passwd file from this new location
export NSS_WRAPPER_PASSWD="${NEW_DESTINATION}"

# Change ownership of the NSS API passwd file
chown "${USER[UID]}":"${USER[GID]}" "${NEW_DESTINATION}"

# Set 'jboss' user to be member of the 'jboss' suplementary group
usermod -aG "${USER[NAME]}" "${USER[NAME]}"
